@using web_app.Models;
@using web_app.Services
@using web_app.Components
@using Microsoft.AspNetCore.Components.Web
@using System.Text.Json;
@inject DatabaseService databaseService


<style>
.container-fluid>.navbar-header {
  float: left;
  margin-right: 10px;
}
.navbar .navbar-nav {
  float: left;
}
.nav>li {
  float: left;
}
.dropdown {
    margin-right: 10px;
}
.alert {
    margin: 0px;
    padding-top: 0.4rem;
    padding-bottom: 0.3rem;
    padding-left: 1rem;
    padding-right: 1rem;
}
</style>

<header>
        <nav class="navbar navbar-expand-sm navbar-light mb-1" style="background-color: white; padding: auto; padding-top: 10px; padding-left: 5px">
            <div class="container-fluid">
                <div class="d-sm-inline-flex justify-content-between">
                    <div class="dropdown">
                      <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        Filters
                      </button>
                      <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                          <li class="dropdown-header text-primary">Status</li>
                          <a class="dropdown-item" @onclick="@(e => AddFilter("Dispatched"))">Dispatched</a>
                          <li class="dropdown-header text-primary">Campaign</li>
                          <a class="dropdown-item" @onclick="@(e => AddFilter("saved-cart"))">Saved Cart</a>
                          <a class="dropdown-item" @onclick="@(e => AddFilter("abandoned-cart"))">Abandoned Cart</a>
                      </div>
                    </div>
                    <input @bind="CurrentInput" @bind:event="oninput" class="form-control mr-sm-2" placeholder="Search" aria-label="Search" style="margin-right: 10px; width: 300px">
                    <button class="btn btn-outline-success my-2 my-sm-0" type="submit" value="Submit" style="margin-right: 10px;">Search</button>
                @foreach (var Filter in Filters)
                {
                    <div class="alert alert-primary alert-dismissible fade show" role="alert" style="width: auto; padding-right:45px; margin-right: 10px">
                        @Filter
                        <button @onclick="(e => RemoveFilter(Filter))" type="button" class="btn-close" data-dismiss="alert" aria-label="Close" style="height: 4px; padding: 16px; padding-left: 5px">
                        </button>
                    </div>
                }
                </div>
            </div>
        </nav>
    </header>

<div>
<table class="table table-hover table-bordered">
  <thead style="background-color: #007DB8; color: white;">
  <tr>
    <th>ID</th>
    <th>Batch ID</th>
    <th>Subject</th>
    <th>Body</th>
    <th>Campaign</th>
    <th>Delivery Method</th>
    <th>Created At</th>
    <th>Sent At</th>
    <th>Status</th>
    <th>Action Item ID</th>
    <th>Target</th>
  </tr>
  </thead>
  <tbody>
  @foreach (var message in databaseService.GetMessages()) {
            @if (CurrentInput == "" || CurrentInput == null || message.target.Contains(CurrentInput) || message.ID.ToString().Contains(CurrentInput) || message.action_item_id.ToString().Contains(CurrentInput))
            {
                @if (CheckFilters(message))
                {
                    <tr id="row" @onclick="(e => SelectItem(message.ID))" data-toggle="modal" data-target="#exampleModal" style="cursor: pointer">
                        <th>@message.ID</th>
                        <th>@message.batch_id</th>
                        <th>@message.subject</th>
                        <th>@message.body</th>
                        <th>@message.campaign</th>
                        <th>@message.delivery_method</th>
                        <th>@message.created_at</th>
                        <th>@message.sent_at</th>
                        <th>@message.status</th>
                        <th>@message.action_item_id</th>
                        <th>@message.target</th>
                    </tr>
                }
            }
        }
</tbody>
</table>
</div>

@if (@selectedItemId != null)
{
    <!-- Modal -->
    <MessageDetails messageID="@selectedItemId" />
}

@code {

    Message selectedItem;
    public Guid selectedItemId;
    string? CurrentInput;
    public List<string> Filters = new List<string>();

    void SelectItem(Guid itemId)
    {
        selectedItemId = itemId;
    }

    bool CheckFilters(Message message)
    {
        int count = 0;
        if (Filters.Contains(message.status)) count++;
        if (Filters.Contains(message.campaign)) count++;
        if (count == Filters.Count())
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    void RemoveFilter(string Filter)
    {
        Filters.Remove(Filter);
    }

    void AddFilter(string Filter)
    {
        if (!Filters.Contains(Filter))
        {
            Filters.Add(Filter);
        }
    }

}